(function() 
{
	var method;
	var noop = function () {};
	var methods = [
	'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
	'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
	'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
	'timeStamp', 'trace', 'warn'
	];
	var length = methods.length;
	var console = (window.console = window.console || {});
	while (length--) 
	{
		method = methods[length];
		
		// Only stub undefined methods.
		if (!console[method]) 
		{
			console[method] = noop;
		}
	}
})();
function getWidgetInfo()
{
	var widgetInfo=
	{
		widgetName:'Jivox Custom Slider Widget',
		description:'The Widget will enable the slider functionality',
		defaultImageURL:'http://jivoxcreatives.s3.amazonaws.com/common/customSlider/BXSlider.jpg',
		params:
		[
			{
				name: 'debug',
				id: 'debug',
				description: 'Set True to have see the log messsages',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'0'
			},
			{
				name: 'Container ID',
				id: 'container',
				description: 'Container ID',
				datatype: 'string',
				displayType:'text',
				"default": "custSlider"
			},
			{
				name: 'Slide Width',
				id: 'slideWidth',
				description: 'The width of each slide. This setting is required for all horizontal carousels!',
				datatype: 'integer',
				displayType:'text',
				"default": "300"
			},
			{
				name: 'mode',
				id: 'mode',
				description: 'Type of transition between slides',
				datatype: 'string',
				displayType:'combo',
				displayChoices:
				[
					{
						name: 'horizontal',
						value: 'horizontal',
						isDefault: true
					},
					{
						name:'vertical',
						value:'vertical'
					},
					{
						name:'fade',
						value:'fade'
					}
				]
			},
			{
				name: 'speed',
				id: 'speed',
				description: 'Slide transition duration (in ms)',
				datatype: 'string',
				displayType:'text',
				"default": "300",
				isOptional:true
			},
			{
				name: 'slideMargin',
				id: 'slideMargin',
				description: 'Margin between each slide',
				datatype: 'integer',
				displayType:'text',
				"default": "5",
				isOptional:true
			},
			{
				name: 'startSlide',
				id: 'startSlide',
				description: 'Starting slide index (zero-based)',
				datatype: 'integer',
				displayType:'text',
				"default": "0",
				isOptional:true
			},
			{
				name: 'randomStart',
				id: 'randomStart',
				description: 'Start slider on a random slide',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'0',
				isOptional:true
			},
			{
				name: 'infiniteLoop',
				id: 'infiniteLoop',
				description: 'If true, clicking "Next" while on the last slide will transition to the first slide and vice-versa',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'1',
				isOptional:true
			},
			{
				name: 'hideControlOnEnd',
				id: 'hideControlOnEnd',
				description: 'If true, "Next" control will be hidden on last slide and vice-versa. Note: Only used when infiniteLoop: false',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'0',
				isOptional:true
			},
			{
				name: 'easing',
				id: 'easing',
				description: 'The type of "easing" to use during transitions.',
				datatype: 'string',
				displayType:'combo',
				displayChoices:
				[
					{
						name: 'linear',
						value: 'linear',
						isDefault: true
					},
					{
						name:'jswing',
						value:'jswing'
					},
					{
						name:'easeInQuad',
						value:'easeInQuad'
					},
					{
						name:'easeOutQuad',
						value:'easeOutQuad'
					},
					{
						name:'easeInOutQuad',
						value:'easeInOutQuad'
					},
					{
						name:'easeInCubic',
						value:'easeInCubic'
					},
					{
						name:'easeOutCubic',
						value:'easeOutCubic'
					},
					{
						name:'easeInOutCubic',
						value:'easeInOutCubic'
					},
					{
						name:'easeInQuart',
						value:'easeInQuart'
					},
					{
						name:'easeOutQuart',
						value:'easeOutQuart'
					},
					{
						name:'easeInOutQuart',
						value:'easeInOutQuart'
					},
					{
						name:'easeInQuint',
						value:'easeInQuint'
					},
					{
						name:'easeOutQuint',
						value:'easeOutQuint'
					},
					{
						name:'easeInOutQuint',
						value:'easeInOutQuint'
					},
					{
						name:'easeInSine',
						value:'easeInSine'
					},
					{
						name:'easeOutSine',
						value:'easeOutSine'
					},
					{
						name:'easeInOutSine',
						value:'easeInOutSine'
					},
					{
						name:'easeInExpo',
						value:'easeInExpo'
					},
					{
						name:'easeOutExpo',
						value:'easeOutExpo'
					},
					{
						name:'easeInOutExpo',
						value:'easeInOutExpo'
					},
					{
						name:'easeInCirc',
						value:'easeInCirc'
					},
					{
						name:'easeOutCirc',
						value:'easeOutCirc'
					},
					{
						name:'easeInOutCirc',
						value:'easeInOutCirc'
					},
					{
						name:'easeInElastic',
						value:'easeInElastic'
					},
					{
						name:'easeOutElastic',
						value:'easeOutElastic'
					},
					{
						name:'easeInOutElastic',
						value:'easeInOutElastic'
					},
					{
						name:'easeInBack',
						value:'easeInBack'
					},
					{
						name:'easeOutBack',
						value:'easeOutBack'
					},
					{
						name:'easeInOutBack',
						value:'easeInOutBack'
					},
					{
						name:'easeInBounce',
						value:'easeInBounce'
					},
					{
						name:'easeOutBounce',
						value:'easeOutBounce'
					},
					{
						name:'easeInOutBounce',
						value:'easeInOutBounce'
					}
				],
				isOptional:true
			},
			{
				name: 'captions',
				id: 'captions',
				description: 'Include image captions. Captions are derived from the image\'s title attribute',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'0',
				isOptional:true
			},
			{
				name: 'ticker',
				id: 'ticker',
				description: 'Use slider in ticker mode (similar to a news ticker)',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'0',
				isOptional:true
			},
			{
				name: 'tickerHover',
				id: 'tickerHover',
				description: 'Ticker will pause when mouse hovers over slider. Note: this functionality does NOT work if using CSS transitions!',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'0',
				isOptional:true
			},
			{
				name: 'adaptiveHeight',
				id: 'adaptiveHeight',
				description: 'Dynamically adjust slider height based on each slide\'s height',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'0',
				isOptional:true
			},
			{
				name: 'adaptiveHeightSpeed',
				id: 'adaptiveHeightSpeed',
				description: 'Slide height transition duration (in ms). Note: only used if adaptiveHeight: true',
				datatype: 'integer',
				displayType:'text',
				"default": "500",
				isOptional:true
			},
			{
				name: 'video',
				id: 'video',
				description: 'If any slides contain video, set this to true.',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'0',
				isOptional:true
			},
			{
				name: 'responsive',
				id: 'responsive',
				description: 'Enable or disable auto resize of the slider. Useful if you need to use fixed width sliders.',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'0',
				isOptional:true
			},
			{
				name: 'touchEnabled',
				id: 'touchEnabled',
				description: 'If true, slider will allow touch swipe transitions',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'1',
				isOptional:true
			},
			{
				name: 'swipeThreshold',
				id: 'swipeThreshold',
				description: 'Amount of pixels a touch swipe needs to exceed in order to execute a slide transition. Note: only used if touchEnabled: true',
				datatype: 'integer',
				displayType:'text',
				"default": "50",
				isOptional:true
			},
			{
				name: 'oneToOneTouch',
				id: 'oneToOneTouch',
				description: 'If true, non-fade slides follow the finger as it swipes',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'1',
				isOptional:true
			},
			{
				name: 'preventDefaultSwipeX',
				id: 'preventDefaultSwipeX',
				description: 'If true, touch screen will not move along the x-axis as the finger swipes',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'0',
				isOptional:true
			},
			{
				name: 'preventDefaultSwipeY',
				id: 'preventDefaultSwipeY',
				description: 'If true, touch screen will not move along the y-axis as the finger swipes',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'1',
				isOptional:true
			},
			{
				name: 'pager',
				id: 'pager',
				description: 'If true, a pager will be added',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'1',
				isOptional:true
			},
			{
				name: 'pagerType',
				id: 'pagerType',
				description: 'If \'full\', a pager link will be generated for each slide. If \'short\', a x / y pager will be used (ex. 1 / 5)',
				datatype: 'string',
				displayType:'combo',
				displayChoices:
				[
					{
						name: 'full',
						value: 'full',
						isDefault: true
					},
					{
						name:'short',
						value:'short'
					}
				],
				isOptional:true
			},
			{
				name: 'pagerShortSeparator',
				id: 'pagerShortSeparator',
				description: 'If pagerType: \'short\', pager will use this value as the separating character',
				datatype: 'string',
				displayType:'text',
				"default": " / ",
				isOptional:true
			},
			{
				name: 'pagerSelector',
				id: 'pagerSelector',
				description: 'Element used to populate the populate the pager. By default, the pager is appended to the bx-viewport',
				datatype: 'string',
				displayType:'text',
				"default": "",
				isOptional:true
			},
			{
				name: 'controls',
				id: 'controls',
				description: 'If true, "Next" / "Prev" controls will be added',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'1',
				isOptional:true
			},
			{
				name: 'nextText',
				id: 'nextText',
				description: 'Text to be used for the "Next" control',
				datatype: 'string',
				displayType:'text',
				"default": "Next",
				isOptional:true
			},
			{
				name: 'prevText',
				id: 'prevText',
				description: 'Text to be used for the "Prev" control',
				datatype: 'string',
				displayType:'text',
				"default": "Prev",
				isOptional:true
			},
			{
				name: 'nextSelector',
				id: 'nextSelector',
				description: 'Element used to populate the "Next" control',
				datatype: 'string',
				displayType:'text',
				"default": "",
				isOptional:true
			},
			{
				name: 'prevSelector',
				id: 'prevSelector',
				description: 'Element used to populate the "Prev" control',
				datatype: 'string',
				displayType:'text',
				"default": "",
				isOptional:true
			},
			{
				name: 'autoControls',
				id: 'autoControls',
				description: 'If true, "Start" / "Stop" controls will be added',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'1',
				isOptional:true
			},
			{
				name: 'startText',
				id: 'startText',
				description: 'Text to be used for the "Start" control',
				datatype: 'string',
				displayType:'text',
				"default": "Start",
				isOptional:true
			},
			{
				name: 'stopText',
				id: 'stopText',
				description: 'Text to be used for the "Stop" control',
				datatype: 'string',
				displayType:'text',
				"default": "Stop",
				isOptional:true
			},
			{
				name: 'autoControlsCombine',
				id: 'autoControlsCombine',
				description: 'When slideshow is playing only "Stop" control is displayed and vice-versa',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'1',
				isOptional:true
			},
			{
				name: 'autoControlsSelector',
				id: 'autoControlsSelector',
				description: 'Element used to populate the auto controls',
				datatype: 'string',
				displayType:'text',
				"default": "",
				isOptional:true
			},
			{
				name: 'auto',
				id: 'auto',
				description: 'Slides will automatically transition',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'0',
				isOptional:true
			},
			{
				name: 'pause',
				id: 'pause',
				description: 'The amount of time (in ms) between each auto transition',
				datatype: 'string',
				displayType:'text',
				"default": "500",
				isOptional:true
			},
			{
				name: 'autoStart',
				id: 'autoStart',
				description: 'Auto show starts playing on load. If false, slideshow will start when the "Start" control is clicked',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'0',
				isOptional:true
			},
			{
				name: 'autoDirection',
				id: 'autoDirection',
				description: 'The direction of auto show slide transitions',
				datatype: 'string',
				displayType:'combo',
				displayChoices:
				[
					{
						name: 'next',
						value: 'next',
						isDefault: true
					},
					{
						name:'prev',
						value:'prev'
					}
				],
				isOptional:true
			},
			{
				name: 'autoHover',
				id: 'autoHover',
				description: 'Auto show will pause when mouse hovers over slider',
				datatype:'boolean',
				displayType:'checkbox',
				'default':'1',
				isOptional:true
			},
			{
				name: 'autoDelay',
				id: 'autoDelay',
				description: 'Time (in ms) auto show should wait before starting',
				datatype: 'integer',
				displayType:'text',
				"default": "0",
				isOptional:true
			},
			{
				name: 'minSlides',
				id: 'minSlides',
				description: 'The minimum number of slides to be shown. Slides will be sized down if carousel becomes smaller than the original size.',
				datatype: 'integer',
				displayType:'text',
				"default": "1",
				isOptional:true
			},
			{
				name: 'maxSlides',
				id: 'maxSlides',
				description: 'The maximum number of slides to be shown. Slides will be sized up if carousel becomes larger than the original size.',
				datatype: 'integer',
				displayType:'text',
				"default": "1",
				isOptional:true
			},
			{
				name: 'moveSlides',
				id: 'moveSlides',
				description: 'The number of slides to move on transition. This value must be >= minSlides, and <= maxSlides. If zero (default), the number of fully-visible slides will be used.',
				datatype: 'integer',
				displayType:'text',
				"default": "1",
				isOptional:true
			}
		]
	}
	return widgetInfo;
}
var widgetConfig= window.getWidgetConfig ? getWidgetConfig() : /*{
	debug: '1',
	container:  "custSlider",
	slideWidth:  "300",
	mode:  'horizontal',
	speed:  "800",
	slideMargin:  "5",
	startSlide:  "0",
	randomStart: '0',
	infiniteLoop: '1',
	hideControlOnEnd: '0',
	easing:  'linear',
	captions: '0',
	ticker: '0',
	tickerHover: '0',
	adaptiveHeight: '0',
	adaptiveHeightSpeed:  "500",
	video: '0',
	responsive: '0',
	touchEnabled: '1',
	swipeThreshold:  "50",
	oneToOneTouch: '1',
	preventDefaultSwipeX: '0',
	preventDefaultSwipeY: '1',
	pager: '1',
	pagerType:  'full',
	pagerShortSeparator:  " / ",
	pagerSelector:  "",
	controls: '1',
	nextText:  "Next",
	prevText:  "Prev",
	nextSelector:  "",
	prevSelector:  "",
	autoControls: '1',
	startText:  "Start",
	stopText:  "Stop",
	autoControlsCombine: '1',
	autoControlsSelector:  "",
	auto: '0',
	pause:  "500",
	autoStart: '0',
	autoDirection:  'next',
	autoHover: '1',
	autoDelay:  "0",
	minSlides:  "1",
	maxSlides:  "1",
	moveSlides:  "1",
};*/ undefined;
if(widgetConfig)
{
	var customGallery=function(){};
	function init(a, b)
	{
		var c = function(a, b)
		{
			var splitUrl = a.split("/");
			if(location.protocol=="https:")
			{
				switch(splitUrl[0])
				{
					case "jivoxcreatives.s3.amazonaws.com":
					{
						splitUrl[0] = "https://drwoutt5e4n26.cloudfront.net";
						break;
					}
					case "creativescdn.jivox.com":
					{
						splitUrl[0] = "https://drwoutt5e4n26.cloudfront.net";
						break;
					}
					case "playercdn.jivox.com":
					{
						splitUrl[0] = "https://d1ytpfpcvrpmqk.cloudfront.net";
						break;
					}
					case "cdn.jivox.com":
					{
						splitUrl[0] = "https://dok6k5lge5svg.cloudfront.net";
						break;
					}
					default:
					{
						splitUrl[0] = "https://" + splitUrl[0];
						break;
					}
				}
			}
			else
			{
				splitUrl[0] = "http://" + splitUrl[0];
			}
			a = splitUrl.join("/");
			var fileExt = a.split(".");
				fileExt = fileExt[fileExt.length-1];
			if(fileExt=="js")
			{
				var c = document.createElement("script");
				c.src = a, c.onload = c.onreadystatechange = function()
				{
					this.readyState && "loaded" != this.readyState && "complete" != this.readyState || (c.onreadystatechange = c.onload = null, b())
				};
				var d = document.getElementsByTagName("head")[0];
				(d || document.body).appendChild(c)
			}
			else if(fileExt=="css")
			{
				var c = document.createElement("link");
				c.href = a;
				c.type = "text/css";
				c.rel = "stylesheet";
				c.onload = c.onreadystatechange = function()
				{
					this.readyState && "loaded" != this.readyState && "complete" != this.readyState || (c.onreadystatechange = c.onload = null, b())
				};
				var d = document.getElementsByTagName("head")[0];
				(d || document.body).appendChild(c)
			}
		
		};
		! function()
		{
			0 != a.length ? c(a.shift(), arguments.callee) : b && b()
		}()
	}
	init(["jivoxcreatives.s3.amazonaws.com/MalbecWidgets/customGalleryWidget/css/jquery.bxslider.css","playercdn.jivox.com/1428034594/unit/js/gz/jquery-2.1.0.min.js","creativescdn.jivox.com/common/jQuery/easing/jquery.easing.1.3.js","creativescdn.jivox.com/common/jQuery/fitvids/jquery.fitvids.js","creativescdn.jivox.com/common/jQuery/bxslider/jquery.bxslider.min.js"], function()
	{
		$jq = jQuery.noConflict();
		(function($j,root)
		{
			var consoleHolder = console;
			root.cGl = function(params)
			{
				var cGlEvents = ["onSliderLoad","onSlideBefore","onSlideAfter","onSlideNext","onSlidePrev","onSlideClick"],
					slider=null,
					topics = {},
					constants=
					{
						useCSS: false,
						preloadImages:"all"
					},
					defaults = 
					{
						container:null,
						debug:true,
						slideWidth:344,
						mode:'horizontal', //'horizontal', 'vertical', 'fade'
						speed:300,
						slideMargin:5,
						startSlide:3,
						randomStart:false,
						infiniteLoop:true,
						hideControlOnEnd:false,
						easing:"linear", // linear,jswing, easeInQuad,easeOutQuad,easeInOutQuad,easeInCubic,easeOutCubic,easeInOutCubic,easeInQuart,easeOutQuart,easeInOutQuart,easeInQuint,easeOutQuint,easeInOutQuint,easeInSine,easeOutSine,easeInOutSine,easeInExpo,easeOutExpo,easeInOutExpo,easeInCirc,easeOutCirc,easeInOutCirc,easeInElastic,easeOutElastic,easeInOutElastic,easeInBack,easeOutBack,easeInOutBack,easeInBounce,easeOutBounce,easeInOutBounce
						captions:false,
						ticker:false,
						tickerHover:false,
						adaptiveHeight:false,
						adaptiveHeightSpeed:500,
						video:false,
						responsive:true,
						preloadImages:"visible",
						useCSS:false,
						touchEnabled:true,
						swipeThreshold:50,
						oneToOneTouch:true,
						preventDefaultSwipeX:true,
						preventDefaultSwipeY:false,
						pager:true,
						pagerType:'full', //'short'
						pagerShortSeparator:' / ',
						pagerSelector:'',
						controls:true,
						nextText:'Next',
						prevText:'Prev',
						nextSelector:null,
						prevSelector:null,
						autoControls:true,
						startText:'Start',
						stopText:'Stop',
						autoControlsCombine:true,
						autoControlsSelector:null,
						auto:false,
						pause:4000,
						autoStart:false,
						autoDirection:'next', // 'prev'
						autoHover:true,
						autoDelay:0,
						minSlides:1,
						maxSlides:1,
						moveSlides:3
					};
				
				var options = $j.extend(defaults, params);
					options = $j.extend(options,constants);
			
				options.container = "#"+options.container;
			
				(function Debug(bool)
				{
					if(!bool)
					{
						consoleHolder = console;
						console = {};
						console.log = function(){};
					}else
						console = consoleHolder;
				})(options.debug);
			
				console.log("options",options);
			
				$j.Topic = function(id)
				{
					var callbacks, method,
						topic = id && topics[id];
					if (!topic)
					{
						callbacks = $j.Callbacks();
						topic = {
							publish: callbacks.fire,
							subscribe: callbacks.add,
							unsubscribe: callbacks.remove
						};
						if (id)
						{
							topics[id] = topic;
						}
					}
					return topic;
				};
			
				(function RegisterCallbacks(obj)
				{
					for(var key in cGlEvents)
					{
						if (obj["cglEvt"][cGlEvents[key]])
						{
							console.log("registered",cGlEvents[key],"callback");
							$j.Topic(obj.container + ""+cGlEvents[key]).subscribe(obj["cglEvt"][cGlEvents[key]]);
						}
					}
				})(options);
			
				function loadSlider()
				{
					$j(options.container).show();
					(function PublishEvents()
					{
						options.onSliderLoad = function(currentIndex)
						{
							$j.Topic(options.container + "onSliderLoad").publish();
							var selectedImg = $j(options.container).find("li").eq(currentIndex+1).find("img");
							var evtName = "onSliderLoad: Img "
							if(selectedImg.attr("data-eventName"))
								evtName+= selectedImg.attr("data-eventName");
							else
								evtName+= currentIndex+1;

							console.log("onSliderLoad::: ",evtName);
							//if(isCampaign)
								//jvxAd.recordEventByName(evtName,0);
						};
						options.onSlideBefore = function($slideElement, oldIndex, newIndex)
						{
							$j.Topic(options.container + "onSlideBefore").publish();
						};
						options.onSlideAfter = function($slideElement, oldIndex, newIndex)
						{
							$j.Topic(options.container + "onSlideAfter").publish();
						};
						options.onSlideNext = function($slideElement, oldIndex, newIndex)
						{
							if(!options.auto || options.ticker)
							{
								$j.Topic(options.container + "onSlideNext").publish();
								var evtName = "onSlideNext: Img "
								if($slideElement.find("img").attr("data-eventName"))
									evtName+= $slideElement.find("img").attr("data-eventName");
								else
									evtName+= $slideElement.index();
	
								console.log("onSlideNext::: ",evtName);
								//if(isCampaign)
									//jvxAd.recordEventByName(evtName,0);
							}
						};
						options.onSlidePrev = function($slideElement, oldIndex, newIndex)
						{
							if(!options.auto || options.ticker)
							{
								$j.Topic(options.container + "onSlidePrev").publish();
								var evtName = "onSlidePrev: Img "
								if($slideElement.find("img").attr("data-eventName"))
									evtName+= $slideElement.find("img").attr("data-eventName");
								else
									evtName+= $slideElement.index();
	
								console.log("onSlidePrev::: ",evtName);
								//if(isCampaign)
									//jvxAd.recordEventByName(evtName,0);
							}
						};
					})();
					slider = $j(options.container).bxSlider(options);
					$j(options.container).find("li").on("click",function()
					{
						$j.Topic(options.container + "onSlideClick").publish();
						var evtName = "onSlideClick: Img "
						if($j(this).find("img").attr("data-eventName"))
							evtName+= $j(this).find("img").attr("data-eventName")
						else
							evtName+= $j(this).index();

						console.log("onSlideClick::: ",evtName);
						//if(isCampaign)
							//jvxAd.recordEventByName(evtName,1);
					});
					$j(".bx-prev").on("click",function()
					{
						var evtName = "Previous Button Clicked";
						console.log("Previous Button::: ",evtName);
						//if(isCampaign)
							//jvxAd.recordEventByName(evtName,1);
					});
					$j(".bx-next").on("click",function()
					{
						var evtName = "Next Button Clicked";
						console.log("Next Button::: ",evtName);
						//if(isCampaign)
							//jvxAd.recordEventByName(evtName,1);
					});
				}
				var customSlider = 
				{
					init: function()
					{
						console.log("Slider Inititated");
						loadSlider();
					},
					goToSlide: function(index,callback)
					{
						var status = slider.goToSlide(index);
						if (status)
						{
							console.log("goToSlide");
							if (callback) callback();
						}
						
						var evtName = "Slide Skipped to:";
						var selectedImg = $j(options.container).find("li").eq(index+1).find("img");
						if(selectedImg.attr("data-eventName"))
							evtName+= selectedImg.attr("data-eventName")
						else
							evtName+= selectedImg.index()+1;
						console.log("goToSlide::: ",evtName);
						//if(isCampaign)
							//jvxAd.recordEventByName(evtName,1);
					},
					goToNextSlide: function(callback)
					{
						var status = slider.goToNextSlide();
						if (status)
						{
							console.log("goToNextSlide");
							if (callback) callback();
						}
					},
					goToPrevSlide: function(callback)
					{
						var status = slider.goToPrevSlide();
						if (status)
						{
							console.log("goToPrevSlide");
							if (callback) callback();
						}
					},
					startAuto: function(callback)
					{
						var status = slider.startAuto();
						if (status)
						{
							console.log("startAuto");
							if (callback) callback();
						}
					},
					stopAuto: function(callback)
					{
						var status = slider.stopAuto();
						if (status)
						{
							console.log("stopAuto");
							if (callback) callback();
						}
					},
					getCurrentSlide: function()
					{
						console.log("getCurrentSlide");
						return slider.getCurrentSlide();
					},
					getSlideCount: function()
					{
						console.log("getSlideCount");
						return slider.getSlideCount();
					},
					reloadSlider: function()
					{
						console.log("reloadSlider");
						slider.reloadSlider();
					},
					destroySlider: function()
					{
						console.log("destroySlider");
						slider.destroySlider();
					}
				};
				return customSlider;
			};
			root.cGl.VERSION = '1.1';	
			var cObj = $j.extend(
			{
				debug:(parseInt(widgetConfig.debug) == 0) ? false : true,
				container:widgetConfig.container,
				slideWidth:parseInt(widgetConfig.slideWidth),
				mode:widgetConfig.mode,
				speed:parseInt(widgetConfig.speed),
				slideMargin:parseInt(widgetConfig.slideMargin),
				startSlide:parseInt(widgetConfig.startSlide),
				randomStart:(parseInt(widgetConfig.randomStart) == 0) ? false : true,
				infiniteLoop:(parseInt(widgetConfig.infiniteLoop) == 0) ? false : true,
				hideControlOnEnd:(parseInt(widgetConfig.hideControlOnEnd) == 0) ? false : true,
				easing:widgetConfig.easing,
				captions:(parseInt(widgetConfig.captions) == 0) ? false : true,
				ticker:(parseInt(widgetConfig.ticker) == 0) ? false : true,
				tickerHover:(parseInt(widgetConfig.tickerHover) == 0) ? false : true,
				adaptiveHeight:(parseInt(widgetConfig.adaptiveHeight) == 0) ? false : true,
				adaptiveHeightSpeed:parseInt(widgetConfig.adaptiveHeightSpeed),
				video:(parseInt(widgetConfig.video) == 0) ? false : true,
				responsive:(parseInt(widgetConfig.responsive) == 0) ? false : true,
				touchEnabled:(parseInt(widgetConfig.touchEnabled) == 0) ? false : true,
				swipeThreshold:parseInt(widgetConfig.swipeThreshold),
				oneToOneTouch:(parseInt(widgetConfig.oneToOneTouch) == 0) ? false : true,
				preventDefaultSwipeX:(parseInt(widgetConfig.preventDefaultSwipeX) == 0) ? false : true,
				preventDefaultSwipeY:(parseInt(widgetConfig.preventDefaultSwipeY) == 0) ? false : true,
				pager:(parseInt(widgetConfig.pager) == 0) ? false : true,
				pagerType:widgetConfig.pagerType,
				pagerShortSeparator:widgetConfig.pagerShortSeparator,
				pagerSelector:widgetConfig.pagerSelector,
				controls:(parseInt(widgetConfig.controls) == 0) ? false : true,
				nextText:widgetConfig.nextText,
				prevText:widgetConfig.prevText,
				nextSelector:widgetConfig.nextSelector,
				prevSelector:widgetConfig.prevSelector,
				autoControls:(parseInt(widgetConfig.autoControls) == 0) ? false : true,
				startText:widgetConfig.startText,
				stopText:widgetConfig.stopText,
				autoControlsCombine:(parseInt(widgetConfig.autoControlsCombine) == 0) ? false : true,
				autoControlsSelector:widgetConfig.autoControlsSelector,
				auto:(parseInt(widgetConfig.auto) == 0) ? false : true,
				pause:parseInt(widgetConfig.pause),
				autoStart:(parseInt(widgetConfig.autoStart) == 0) ? false : true,
				autoDirection:widgetConfig.autoDirection,
				autoHover:(parseInt(widgetConfig.autoHover) == 0) ? false : true,
				autoDelay:parseInt(widgetConfig.autoDelay),
				minSlides:parseInt(widgetConfig.minSlides),
				maxSlides:parseInt(widgetConfig.maxSlides),
				moveSlides:parseInt(widgetConfig.moveSlides)
			},(typeof custGalleryEvents != "undefined") ? {cglEvt: custGalleryEvents} : {cglEvt: {}});
			customGallery= new cGl(cObj);
			customGallery.init();
		})($jq,window);
	});
}
